-- @path SimplePDL=/fr.n7.simplePDL/SimplePDL.ecore
-- @path PetriNet=/fr.n7.petriNet/PetriNet.ecore

module simplepdltopetri;
create OUT : Petri from IN : SimplePDL;

-- Règle principale : Process -> petriNet
rule Process2PetriNet {
    from p : SimplePDL!Process
    to net : Petri!petriNet (
        nom <- p.name,
        petrielements <- p.processelement->collect(e | thisModule.mapElement(e))->flatten()
    )
}

-- Helper pour retrouver le Process d’un ProcessElement
helper context SimplePDL!ProcessElement 
def: getProcess() : SimplePDL!Process =
    SimplePDL!Process.allInstances()->select(p | p.processelement->includes(self));

-- Helper de routage dynamique 
helper def: mapElement(e : SimplePDL!ProcessElement) : Sequence(Petri!petriElement) =
    if e.oclIsTypeOf(SimplePDL!WorkDefinition) then
        thisModule.WorkDefinition2Petri(e.oclAsType(SimplePDL!WorkDefinition))
    else if e.oclIsTypeOf(SimplePDL!WorkSequence) then
        Sequence { thisModule.WorkSequence2Petri(e.oclAsType(SimplePDL!WorkSequence)) }
    else
        Sequence {} .
    endif endif;;


-- WorkDefinition → 3 places, 2 transitions, 4 arcs
rule WorkDefinition2Petri {
    from
        wd : SimplePDL!WorkDefinition
    to
        -- Places
        ready : Petri!place (
            nom <- wd.name + '_ready',
            jetons <- 1
        ),
        started : Petri!place (
            nom <- wd.name + '_started',
            jetons <- 0
        ),
        finished : Petri!place (
            nom <- wd.name + '_finished',
            jetons <- 0
        ),

        -- Transitions
        t_start : Petri!transition (
            nom <- 'start_' + wd.name
        ),
        t_finish : Petri!transition (
            nom <- 'finish_' + wd.name
        ),

        -- Arcs
        arc1 : Petri!arcsPonderes (
            place <- ready,
            transition <- t_start,
            typeArc <- #placeToTransition,
            readArc <- false
        ),
        arc2 : Petri!arcsPonderes (
            place <- started,
            transition <- t_start,
            typeArc <- #transitionToPlace,
            readArc <- false
        ),
        arc3 : Petri!arcsPonderes (
            place <- started,
            transition <- t_finish,
            typeArc <- #placeToTransition,
            readArc <- false
        ),
        arc4 : Petri!arcsPonderes (
            place <- finished,
            transition <- t_finish,
            typeArc <- #transitionToPlace,
            readArc <- false
        )
}


-- WorkSequence → arc conditionnel selon type
rule WorkSequence2Petri {
    from ws : SimplePDL!WorkSequence
    to arc : Petri!arcsPonderes (
        place <- thisModule.getPlace(ws),
        transition <- thisModule.getTransition(ws),
        poids <- 1,
        readArc <- false,
        typeArc <- #placeToTransition
    )
}

-- Helpers pour noms selon linkType
helper context SimplePDL!WorkSequence def: getPlaceName() : String =
    if self.linkType = #startToStart or self.linkType = #startToFinish then
        self.predecessor.name + '_started'
    else
        self.predecessor.name + '_finished'
    endif;

helper context SimplePDL!WorkSequence def: getTransitionName() : String =
    if self.linkType = #startToStart or self.linkType = #finishToStart then
        'start_' + self.successor.name
    else
        'finish_' + self.successor.name
    endif;

-- Résolution de la place et de la transition selon le nom
helper def: getPlace(ws : SimplePDL!WorkSequence) : Petri!place =
    Petri!place.allInstances()->any(p | p.nom = ws.getPlaceName());

helper def: getTransition(ws : SimplePDL!WorkSequence) : Petri!transition =
    Petri!transition.allInstances()->any(t | t.nom = ws.getTransitionName());



