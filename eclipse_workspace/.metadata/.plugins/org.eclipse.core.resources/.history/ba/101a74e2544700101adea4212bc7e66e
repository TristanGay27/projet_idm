-- @path SimplePDL=/fr.n7.simplePDL/SimplePDL.ecore
-- @path TM=/fr.n7.taskmaster/TaskMaster.ecore

module taskmaster;
create OUT : TM from IN : SimplePDL, IN1 : SimplePDL;

rule Process2EventBundle {
	from process : SimplePDL!Process
	to bundle : TM!EventBundle(name <- process.name)
}

helper context SimplePDL!ProcessElement
def: getProcess() : SimplePDL!Process =
	SimplePDL!Process.allInstances()->select(e | e.processelement->includes(self));


rule WD2Task {
	from wd : SimplePDL!WorkDefinition
	to
	event_start : TM!Event(bundle <- wd.getProcess(), name <- wd.name + '_start'),
	event_finish: TM!Event(bundle <- wd.getProcess(), name <- wd.name + '_finish'),
	finish_after_start: TM!Causal(event <- event_finish, target <- event_start)
}

rule WS2Requirement {
	from ws : SimplePDL!WorkSequence
	to req : TM!Causal(
	event <- thisModule.resolveTemp(ws.successor, 'event_' +
			(if ws.linkType = #startToStart or ws.linkType = #finishToStart then
				'start'
			else
				'finish'
			endif)),
			target <- thisModule.resolveTemp(ws.predecessor, 'event_' +
			(if ws.linkType = #startToStart or ws.linkType = #startToFinish then
				'start'
			else
				'finish'
			endif)))
}

rule WD2Supply {
	from wd : SimplePDL!Ressources
	to
	supply : TM!Supply(bundle <- wd.getProcess(),consumable <- wd.consumable, name <- wd.name,available <- wd.quantity)
}

rule WD2Physical{
	from wd : SimplePDL!RessourcesAllouees
	to
	physical : TM!Physical(event <- wd.WorkDefinition , target <- wd.ressources,requested <- wd.number)
}
